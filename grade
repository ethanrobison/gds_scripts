#!/bin/zsh


CID=$1
AUTH="Authorization: Bearer $(cat $2)"
ASSIGN_ID=$(cat $3)
RESULTS_ID=$(cat $4)

validate () {
    REST=$(tail -n +3 "$1")
    LINES=$(echo "$REST" | wc -l)
    if (( $LINES < 2 || $LINES > 3 ))
    then
        echo "\nToo many/few lines."
        return 0
    fi

    CHUNKS=("${(f)REST}")
    for c in $CHUNKS
    do
        if ! echo $c | grep -q -E '[a-z]{3}[0-9]{3,4},[0-9]{,3}'
        then
            echo "Poorly formatted.\n"
            return 0
        fi
    done

    return 1
}

sub_grade () {
    local BASE=100

    if [ "$1" != "false" ]
    then
        EPOCH=$(date -d $2 +%s)
        DIFF=$(((($EPOCH - $DUE_SEC) / 86400) + 1))

        BASE=$((100 - 25 * $DIFF))
    fi

    validate "$3"
    MUL=$?
    return $(($BASE * $MUL))
}


# check assignment i
# check assignment ii
# check people
# check submissions
# grade submissions
# crunch numbers on submissions
# publish assignment ii
# grade assignment ii

BASE="https://canvas.northwestern.edu/api/v1"

TEMP_DIR=temp_evaluate
mkdir -p $TEMP_DIR

# calculate due date epoch

DUE_DATE=$(curl -s -X GET "$BASE/courses/$CID/assignments/$ASSIGN_ID" \
    -H "$AUTH" \
    | jq -r '.due_at')


DUE_SEC=$(date -d "$DUE_DATE" +%s)

# download subs

SUBS=$(curl -s -X GET "$BASE/courses/$CID/assignments/$ASSIGN_ID/submissions" \
    -H "$AUTH" \
    -F "per_page=99")

TRIMMED=$(echo $SUBS | \
    jq '[.[] | {
        uid: .user_id,
        timestamp: .submitted_at,
        late: .late,
        url: .attachments[]? .url
    }]')

# upload grades i: original submission

LEN=$(echo $TRIMMED | jq '. | length')
LEN=$((LEN - 1))

for i in {0..$LEN}
do
    SUB=$(echo $TRIMMED | jq ".[$i]")
    USER=$(echo $SUB | jq '.uid')

    LATE=$(echo $SUB | jq '.late')

    TIMESTAMP=$(echo $SUB | jq -r '.timestamp')

    URL=$(echo $SUB | jq -r '.url')
    FILE="$TEMP_DIR/$USER"
    wget -q -O "$FILE" "$URL"

    sub_grade "$LATE" "$TIMESTAMP" "$FILE"
    GRADE=$?
    echo "$USER submission grade: $GRADE"

    OUTPUT=$(curl -s -X PUT \
        "$BASE/courses/$CID/assignments/$ASSIGN_ID/submissions/$USER" \
        -H "$AUTH" \
        -F "submission[posted_grade]=$GRADE%")
done

# TODO grade multiple submissions at once (one PUT request)

# process subs

typeset -A COUNTS 
typeset -A TOTALS

for file in ./$TEMP_DIR/**/*
do
    REST=$(tail -n +3 "$file")
    CHUNKS=(${(f)REST})

    for c in $CHUNKS
    do
        PARTS=("${(@s/,/)c}")
        NID=$PARTS[1]
        SCORE=$(echo $PARTS[2] | sed 's///g')

        if ! (( ${+COUNTS[$NID]} ))
        then
            COUNTS[$NID]=0
            TOTALS[$NID]=0
        fi

        NEWCOUNT=$((1 + $COUNTS[$NID]))
        NEWTOTAL=$(($SCORE + $TOTALS[$NID]))
        COUNTS[$NID]=$NEWCOUNT
        TOTALS[$NID]=$NEWTOTAL
    done
done

# TODO move this out to another script and store a local version

USERS=$(curl -s -X GET "$BASE/courses/$CID/users" \
    -H "$AUTH" \
    -F "per_page=99" \
    -F "enrollment_type[]=student")

MAP=$(echo $USERS | jq -r '[.[] | { uid: .id, netid: .sis_user_id }]')

LEN=$(echo $MAP | jq '. | length')
LEN=$((LEN - 1))

typeset -A NETTOSIS

for i in {0..$LEN}; do
    CHUNK=$(echo $MAP | jq ".[$i]")
    USER=$(echo $CHUNK | jq -r '.uid')
    NETID=$(echo $CHUNK | jq -r '.netid')
    NETTOSIS[$NETID]=$USER
done

# publish results assignment

FOO=$(curl -s -X PUT \
    "$BASE/courses/$CID/assignments/$RESULTS_ID/" \
    -H "$AUTH" \
    -F "assignment[published]=true")

# upload grades

for netid sisid in ${(kv)NETTOSIS}; do
    if ! (( ${+COUNTS[$netid]} ))
    then
        echo "missing $netid"
    else
        RESULT=$(( $TOTALS[$netid] / $COUNTS[$netid] ))
        if (( $RESULT > 100 )); then RESULT=100; fi
        echo "$netid $sisid $RESULT"

        FOO=$(curl -s -X PUT \
            "$BASE/courses/$CID/assignments/$RESULTS_ID/submissions/$sisid" \
            -H "$AUTH" \
            -F "submission[posted_grade]=$RESULT%")
    fi
done

rm -rf $TEMP_DIR
